import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import logging
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from aiogram.enums import ParseMode
import os
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = "8125187062:AAFGe_HFNxM3oTMwWuQYIwvem2ILEkcUj3o"
ADMIN_CHAT_ID = "665509096"

# –ò—Å–∫–æ–º—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö)
TARGET_ODDS = {2.57, 1.83, 2.21}

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª–∞—Å—Å–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞–º —Å—Ç–∞–≤–æ–∫
MARKET_TYPES = {
    "lv_market_results": "1-X-2",
    "lv_market-doubleChance": "–î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å",
    "lv_market-overUnder": "–¢–æ—Ç–∞–ª",
    "lv_market-handicap": "–§–æ—Ä–∞"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def get_market_name(element):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    try:
        # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º —Ä—ã–Ω–∫–∞
        market_element = element.find_element(By.XPATH, "./ancestor::div[contains(@class, 'lv_event_market')]")
        for class_name, market_name in MARKET_TYPES.items():
            if class_name in market_element.get_attribute("class"):
                return market_name
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"


async def check_odds(match_element):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å —Ç–∏–ø–∞–º–∏ —Å—Ç–∞–≤–æ–∫"""
    found_odds = []
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ –º–∞—Ç—á–µ
        all_odds_elements = match_element.find_elements(By.CSS_SELECTOR, ".lv_stake_odd")

        for odd_element in all_odds_elements:
            try:
                odd_text = odd_element.text
                if not odd_text:
                    continue

                num = float(odd_text)
                if num in TARGET_ODDS:
                    market_type = await get_market_name(odd_element)
                    found_odds.append({
                        "value": num,
                        "type": market_type,
                        "element": odd_element
                    })
            except ValueError:
                continue

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")

    return found_odds


async def parse_shadow_dom():
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Shadow DOM"""
    driver = None
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome
        chrome_options = Options()
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument(f"--user-data-dir=/tmp/chrome_profile_{random.randint(1,10000)}")
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)

        logger.info("–û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É PM.BY...")
        driver.get("https://pm.by/ru/sport/live/football/flt-IntcIjFcIjp7fX0i-sub")

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Shadow DOM
        wait = WebDriverWait(driver, 20)
        shadow_host = wait.until(
            EC.presence_of_element_located((By.TAG_NAME, "sport-latino-view"))
        )

        # –ü–æ–ª—É—á–∞–µ–º Shadow Root
        shadow_root = driver.execute_script(
            "return arguments[0].shadowRoot", shadow_host
        )

        if not shadow_root:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Shadow Root")
            return None

        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
        matches = []
        match_blocks = shadow_root.find_elements(By.CSS_SELECTOR, ".lv_event_row")

        for match in match_blocks:
            try:
                teams = match.find_element(By.CSS_SELECTOR, ".lv_teams").text
                time_elem = match.find_element(By.CSS_SELECTOR, ".lv_event_time")
                time = time_elem.get_attribute("title") or time_elem.text

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç
                try:
                    score = match.find_element(By.CSS_SELECTOR, ".dg_live_score").text
                except:
                    score = "–°—á–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                found_odds = await check_odds(match)

                matches.append({
                    "teams": teams,
                    "time": time,
                    "score": score,
                    "found_odds": found_odds,
                    "has_target_odds": len(found_odds) > 0
                })

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞: {e}")
                continue

        return matches

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return None
    finally:
        if driver:
            driver.quit()


async def monitor_matches():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
    while True:
        try:
            logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–∞—Ç—á–µ–π...")
            matches = await parse_shadow_dom()

            if matches:
                target_matches = [m for m in matches if m['has_target_odds']]

                if target_matches:
                    message = "üéØ –ù–∞–π–¥–µ–Ω—ã –º–∞—Ç—á–∏ —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏:\n\n"
                    for match in target_matches:
                        message += (
                            f"‚öΩ <b>{match['teams']}</b>\n"
                            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {match['time']}\n"
                        )

                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º —Å—Ç–∞–≤–æ–∫
                        odds_by_type = {}
                        for odd in match['found_odds']:
                            if odd['type'] not in odds_by_type:
                                odds_by_type[odd['type']] = []
                            odds_by_type[odd['type']].append(str(odd['value']))

                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö
                        for market_type, odds in odds_by_type.items():
                            message += f"üí∞ <b>{market_type}:</b> {', '.join(odds)}\n"

                        message += "\n"

                    await bot.send_message(ADMIN_CHAT_ID, message, parse_mode="HTML")
                else:
                    logger.info("–ú–∞—Ç—á–∏ —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö")

            await asyncio.sleep(120)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(120)


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ PM.BY</b>\n\n"
        "–ò–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç—á–µ–π –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: 2.57, 1.83 –∏–ª–∏ 2.21\n\n",
        parse_mode="HTML"
    )


@dp.message(Command("check"))
async def manual_check(message: types.Message):
    msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –º–∞—Ç—á–∏ –≤—Ä—É—á–Ω—É—é...")
    matches = await parse_shadow_dom()

    if not matches:
        await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö")
        return

    target_matches = [m for m in matches if m['has_target_odds']]
    if not target_matches:
        await msg.edit_text("‚ÑπÔ∏è –ú–∞—Ç—á–∏ —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    message = "üîç <b>–ù–∞–π–¥–µ–Ω—ã –º–∞—Ç—á–∏ —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏:</b>\n\n"
    for match in target_matches[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –º–∞—Ç—á–∞–º–∏
        message += (
            f"‚öΩ <b>{match['teams']}</b>\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {match['time']}\n"
            f"üî¢ <b>–°—á–µ—Ç:</b> {match['score']}\n"
        )

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        odds_by_type = {}
        for odd in match['found_odds']:
            if odd['type'] not in odds_by_type:
                odds_by_type[odd['type']] = []
            odds_by_type[odd['type']].append(str(odd['value']))

        for market_type, odds in odds_by_type.items():
            message += f"üí∞ <b>{market_type}:</b> {', '.join(odds)}\n"

        message += "\n"

    await msg.edit_text(message, parse_mode="HTML")


async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(monitor_matches())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
