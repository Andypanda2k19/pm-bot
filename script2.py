
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import logging
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from aiogram.enums import ParseMode
import os
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import time
import traceback
from selenium.common.exceptions import TimeoutException
from selenium.common.exceptions import StaleElementReferenceException
import hashlib
from logging.handlers import RotatingFileHandler
import uuid
import shutil
import glob
import re


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
assert TOKEN is not None, "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env"
assert ADMIN_CHAT_ID is not None, "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env"
assert GROUP_CHAT_ID is not None, "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GROUP_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env"

# –ò—Å–∫–æ–º—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
TARGET_ODDS = {2.57, 1.83, 2.21}

# –¢–∏–ø—ã —Å—Ç–∞–≤–æ–∫
MARKET_TYPES = {
    "lv_market_results": "1-X-2",
    "lv_market-doubleChance": "–î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å",
    "lv_market-overUnder": "–¢–æ—Ç–∞–ª",
    "lv_market-handicap": "–§–æ—Ä–∞",
    "lv_market-bothTeamsToScore": "–û–±–µ –∑–∞–±—å—é—Ç",
    "lv_market-correctScore": "–¢–æ—á–Ω—ã–π —Å—á–µ—Ç"
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª–∞
CYBER_FOOTBALL_KEYWORDS = ["fifa", "–∫–∏–±–µ—Ä", "cyber", "esports", "e-sports", "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π", "virtual", "EA", "volta"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
bet_messages = {}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

handler = RotatingFileHandler("bot.log", maxBytes=5_000_000, backupCount=3)


async def cleanup_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ Python"""
    report = ["üóë –û—Ç—á–µ—Ç –æ–± –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞:"]

    try:
        # 1. –û—á–∏—Å—Ç–∫–∞ /tmp/
        tmp_size = 0
        for f in glob.glob('/tmp/*'):
            try:
                if os.path.isfile(f):
                    tmp_size += os.path.getsize(f)
                    os.remove(f)
                elif os.path.isdir(f):
                    shutil.rmtree(f)
            except Exception as e:
                report.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {f}: {str(e)}")
        report.append(f"‚úÖ /tmp/ –æ—á–∏—â–µ–Ω (–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ~{tmp_size // 1024} KB)")

        # 2. –û—á–∏—Å—Ç–∫–∞ ~/.cache/
        cache_dir = os.path.expanduser('~/.cache')
        if os.path.exists(cache_dir):
            shutil.rmtree(cache_dir)
            os.makedirs(cache_dir, exist_ok=True)
            report.append("‚úÖ ~/.cache/ –æ—á–∏—â–µ–Ω")
        else:
            report.append("‚ÑπÔ∏è ~/.cache/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # 3. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (–±–µ–∑ sudo)
        log_files = glob.glob('/var/log/*.log') + glob.glob('/var/log/**/*.log')
        deleted_logs = 0
        for log in log_files:
            try:
                if os.path.getmtime(log) < time.time() - 7 * 86400:  # –°—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
                    os.remove(log)
                    deleted_logs += 1
            except:
                continue
        report.append(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ª–æ–≥–æ–≤: {deleted_logs}")

        return "\n".join(report)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}"


async def scheduled_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
    while True:
        try:
            report = await cleanup_cache()
            logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üïí –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ {datetime.now().strftime('%H:%M')}\n\n{report}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ scheduled_cleanup: {e}")

        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å


@dp.message(Command("cleanup"))
async def manual_cleanup(message: types.Message):
    """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ"""


    msg = await message.answer("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞...")
    report = await cleanup_cache()
    await msg.edit_text(report)

def clean_tmp_older_than(minutes=30):
    now = time.time()
    tmp_dir = "/tmp"
    for filename in os.listdir(tmp_dir):
        filepath = os.path.join(tmp_dir, filename)
        if os.path.isfile(filepath):
            if now - os.path.getmtime(filepath) > minutes * 60:
                try:
                    os.remove(filepath)
                except Exception:
                    pass


async def is_cyber_football(teams_text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ç—á –∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª–æ–º"""
    if not teams_text:
        return False
    teams_lower = teams_text.lower()
    return any(keyword in teams_lower for keyword in CYBER_FOOTBALL_KEYWORDS)


async def get_market_name(element):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    try:
        market_element = element.find_element(By.XPATH, "./ancestor::div[contains(@class, 'lv_event_market')]")
        for class_name, market_name in MARKET_TYPES.items():
            if class_name in market_element.get_attribute("class"):
                return market_name
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"


async def check_odds(match_element):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ –º–∞—Ç—á–µ"""
    found_odds = []
    try:
        all_odds_elements = match_element.find_elements(By.CSS_SELECTOR, ".lv_stake_odd")
        for odd_element in all_odds_elements:
            try:
                odd_text = odd_element.text
                if not odd_text:
                    continue
                num = float(odd_text)
                if num in TARGET_ODDS:
                    market_type = await get_market_name(odd_element)
                    found_odds.append({
                        "value": num,
                        "type": market_type,
                        "element": odd_element
                    })
            except ValueError:
                continue
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
    return found_odds


def setup_driver():
    chrome_options = Options()
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-application-cache")
    chrome_options.add_argument("--disk-cache-size=0")
    chrome_options.add_argument(f"--user-data-dir=/tmp/chrome-data-{uuid.uuid4()}")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver


def wait_for_element(driver, by, selector, timeout=20, poll_frequency=0.5, logger=None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –ª–æ–≥–∞–º–∏.

    :param driver: Selenium WebDriver
    :param by: –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ (By.CSS_SELECTOR, By.XPATH –∏ —Ç.–ø.)
    :param selector: –°—Ç—Ä–æ–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    :param timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    :param poll_frequency: –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    :param logger: –õ–æ–≥–≥–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
    :return: WebElement –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    start_time = time.time()
    while True:
        try:
            element = driver.find_element(by, selector)
            if logger:
                elapsed = time.time() - start_time
                logger.info(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {selector} —á–µ—Ä–µ–∑ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
            return element
        except Exception:
            elapsed = time.time() - start_time
            if elapsed > timeout:
                if logger:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç: {selector} –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
                return None
            time.sleep(poll_frequency)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ

async def parse_match_page(driver, event_url):
    logger.info(">>> –ù–∞—á–∞–ª–æ parse_match_page")
    result_template = {
        "teams": "",
        "score": "",
        "time": "",
        "found_odds": [],
        "has_target_odds": False,
        "event_url": event_url
    }

    wait = WebDriverWait(driver, 10)
    try:
        shadow_host = wait.until(EC.presence_of_element_located((By.TAG_NAME, "sport-latino-view")))
    except TimeoutException:
        logger.error("–≠–ª–µ–º–µ–Ω—Ç sport-latino-view –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è")
        return result_template

    def get_shadow_element(driver, shadow_host, selector):
        return driver.execute_script(
            '''
            if (arguments[0].shadowRoot) {
                return arguments[0].shadowRoot.querySelector(arguments[1]);
            }
            return null;
            ''',
            shadow_host, selector
        )

    def get_shadow_elements(driver, shadow_host, selector):
        return driver.execute_script(
            '''
            if (arguments[0].shadowRoot) {
                return Array.from(arguments[0].shadowRoot.querySelectorAll(arguments[1]));
            }
            return [];
            ''',
            shadow_host, selector
        )

    try:
        driver.save_screenshot("debug_event_page.png")

        home_team_elem = get_shadow_element(driver, shadow_host, ".lv_team-home .lv_team_name_text")
        if not home_team_elem:
            raise Exception("–î–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        home_team = home_team_elem.text

        away_team_elem = get_shadow_element(driver, shadow_host, ".lv_team-away .lv_team_name_text")
        if not away_team_elem:
            raise Exception("–ì–æ—Å—Ç–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        away_team = away_team_elem.text

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥: '{home_team}' vs '{away_team}'")

        time_info_elem = get_shadow_element(driver, shadow_host, ".lv_timer")
        time_info = time_info_elem.text if time_info_elem else ""

        score_elements = get_shadow_elements(driver, shadow_host, 'div.lv_live_scores span.lv_score')

        if len(score_elements) >= 2:
            home_score = score_elements[0].text
            away_score = score_elements[1].text
            score = f"{home_score}:{away_score}"
            print("–°—á—ë—Ç:", score)
        else:
            score = ""
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—á—ë—Ç–∞")

        # --- –ö–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ "1-–π —Ç–∞–π–º" ---
        tabs = get_shadow_elements(driver, shadow_host, "button.lv_filter_tab")
        first_half_tab = None
        for tab in tabs:
            try:
                title = tab.get_attribute("title")
                if title == "1-–π —Ç–∞–π–º":
                    first_half_tab = tab
                    break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ title —É –≤–∫–ª–∞–¥–∫–∏: {e}")

        if first_half_tab:
            driver.execute_script("arguments[0].click();", first_half_tab)
            logger.info("–ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '1-–π —Ç–∞–π–º'")
            # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É —Ä—ã–Ω–∫–æ–≤ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
            time.sleep(2)  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —É–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∞–¥–æ
        else:
            logger.warning("–í–∫–ª–∞–¥–∫–∞ '1-–π —Ç–∞–π–º' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        all_odds = []

        markets = get_shadow_elements(driver, shadow_host, 'div.lv_market')
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä—ã–Ω–∫–æ–≤: {len(markets)}")

        for i, market in enumerate(markets):
            try:
                header_el = market.find_element(By.CSS_SELECTOR, 'span.lv_header_text')
                header = header_el.text.strip()
            except Exception:
                continue

            if "–¢–æ—Ç–∞–ª" not in header:
                continue

            stakes = market.find_elements(By.CSS_SELECTOR, 'button.lv_marketStake')

            for stake in stakes:
                try:
                    stake_holder = stake.find_element(By.CSS_SELECTOR, 'span.lv_stake_holder')
                    odd_factor_el = stake.find_element(By.CSS_SELECTOR, 'span.lv_stake_factor')

                    stake_text = stake_holder.text.strip()
                    odd_value = float(odd_factor_el.text.strip())

                    if odd_value in TARGET_ODDS:
                        odd_type = "–ë–æ–ª—å—à–µ" if "–ë–æ–ª—å—à–µ" in stake_text else "–ú–µ–Ω—å—à–µ"
                        detail = f"{header} {stake_text}"
                        all_odds.append({
                            "value": odd_value,
                            "type": f"–¢–æ—Ç–∞–ª {odd_type}",
                            "detail": detail
                        })
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏: {e}")
                    continue

        print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫—ç—Ñ—ã:")
        for odd in all_odds:
            print(f"{odd['type']}: {odd['value']} ({odd['detail']})")

        if len(all_odds) > 0:
            await send_bet_to_chats(
                {
                    "teams": f"{home_team} - {away_team}",
                    "score": score,
                    "time": time_info,
                    "found_odds": all_odds,
                    "has_target_odds": True,
                    "event_url": event_url
                },
                all_odds
            )
        return {
            "teams": f"{home_team} - {away_team}",
            "score": score,
            "time": time_info,
            "found_odds": all_odds,
            "has_target_odds": len(all_odds) > 0,
            "event_url": event_url
        }

    except Exception:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ parse_match_page: {traceback.format_exc()}")
        return result_template


async def parse_shadow_dom(driver):
    BASE_URL = "https://pm.by/ru/sport/live/football/flt-IntcIjFcIjp7fX0i-sub"
    logger.info(f"–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {BASE_URL}")
    driver.get(BASE_URL)

    shadow_host = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.TAG_NAME, "sport-latino-view"))
    )
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (readyState)")
    WebDriverWait(driver, 30).until(
        lambda d: d.execute_script("return document.readyState") == "complete"
    )

    shadow_root = driver.execute_script("return arguments[0].shadowRoot", shadow_host)
    match_blocks = shadow_root.find_elements(By.CSS_SELECTOR, ".lv_event_row")
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(match_blocks)}")

    all_matches = []

    for i in range(len(match_blocks)):
        try:
            shadow_host = driver.find_element(By.TAG_NAME, "sport-latino-view")
            shadow_root = driver.execute_script("return arguments[0].shadowRoot", shadow_host)
            match_blocks = shadow_root.find_elements(By.CSS_SELECTOR, ".lv_event_row")

            if i >= len(match_blocks):
                logger.warning(f"[{i}] –ò–Ω–¥–µ–∫—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            match_element = match_blocks[i]

            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –º–∞—Ç—á–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ title
            time_elem = match_element.find_element(By.CSS_SELECTOR, ".lv_event_time")
            time_title = time_elem.get_attribute("title").lower()  # –ø—Ä–∏–º–µ—Ä: "6' 1-–π —Ç–∞–π–º"

            # –ï—Å–ª–∏ –º–∞—Ç—á –Ω–µ –≤ –ø–µ—Ä–≤–æ–º —Ç–∞–π–º–µ –∏ –Ω–µ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if "1-–π —Ç–∞–π–º" not in time_title and "–ø–µ—Ä–µ—Ä—ã–≤" not in time_title:
                logger.info(f"[{i}] –ú–∞—Ç—á –Ω–µ –≤ –ø–µ—Ä–≤–æ–º —Ç–∞–π–º–µ –∏–ª–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ ({time_title}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥ (—Å–∫–æ–±–∫–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º)
            teams_elem = match_element.find_element(By.CSS_SELECTOR, ".lv_teams")
            teams_title = teams_elem.get_attribute("title")
            if re.search(r"\([A-Za-z\s]+\)", teams_title):
                logger.info(f"[{i}] –ö–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {teams_title}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á.")
                continue

            match_link = driver.execute_script(
                "return arguments[0].querySelector('.lv_event_info.lv__pointer')", match_element
            )
            if not match_link:
                logger.warning(f"[{i}] –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                continue

            driver.execute_script("arguments[0].click();", match_link)
            WebDriverWait(driver, 10).until(lambda d: "/event-details/" in d.current_url)
            match_url = driver.current_url

            logger.info(f"[{i + 1}] –ü–µ—Ä–µ—à–ª–∏ –ø–æ –∫–ª–∏–∫—É: {match_url}")
            time.sleep(1)

            match_data = await parse_match_page(driver, match_url)
            if match_data:
                all_matches.append(match_data)

        except StaleElementReferenceException:
            logger.warning(f"[{i}] –£—Å—Ç–∞—Ä–µ–≤—à–∏–π —ç–ª–µ–º–µ–Ω—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue
        except Exception as e:
            logger.error(f"[{i}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ: {traceback.format_exc()}")
        finally:
            driver.get(BASE_URL)
            WebDriverWait(driver, 10).until(lambda d: BASE_URL in d.current_url)
            WebDriverWait(driver, 10).until(lambda d: d.execute_script("return document.readyState") == "complete")
            time.sleep(0.5)

    driver.quit()
    return all_matches

def make_prediction(odds_by_type: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤"""
    recommendations = []

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ float
        def safe_float(val): return float(val.replace(",", "."))

        one_b = max([safe_float(x) for x in odds_by_type.get("1–±", [])], default=0)
        zero_five_b = max([safe_float(x) for x in odds_by_type.get("0.5–±", [])], default=0)
        one_five_b = [safe_float(x) for x in odds_by_type.get("1.5–±", [])]

        if one_b == 2.57:
            recommendations.append("‚ö†Ô∏è –ë–µ–∑ —Ä–∏—Å–∫–∞: —Ç–æ—Ç–∞–ª 0.5–ë –Ω–∞ –ø—Ä–æ–±—É (0.5%)")

        if zero_five_b == 2.57:
            recommendations.append("üî• –†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –≤—Ö–æ–¥: —Ç–æ—Ç–∞–ª 0.5–ë (–≤—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)")

        if sorted(one_five_b) == sorted([2.57, 2.21, 1.83]):
            recommendations.append("‚úÖ –ë–µ–∑ —Ä–∏—Å–∫–∞: –º–æ–∂–Ω–æ –≥—Ä–µ—Ç—å 1–ë (–ø–æ 1.5–ë)")

    except Exception as e:
        recommendations.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ: {e}")

    return "\n".join(recommendations) if recommendations else "‚ùå –ü—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–µ—Ç –ø–æ —à–∞–±–ª–æ–Ω—É"

async def send_bet_to_chats(match_info, found_odds):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞–≤–∫—É –≤ –æ–±–∞ —á–∞—Ç–∞"""
    try:
        print(f"üîî send_bet_to_chats –≤—ã–∑–≤–∞–Ω –¥–ª—è: {match_info['teams']}")

        if not found_odds:
            print("‚ö†Ô∏è found_odds –ø—É—Å—Ç–æ–π!")
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"‚öΩ <b>{match_info['teams']}</b>\n"
            f"‚è∞ –í—Ä–µ–º—è: {match_info['time']}\n"
            f"üî¢ –°—á–µ—Ç: {match_info['score']}\n\n"
            f"üí∞ <b>–ù–∞–π–¥–µ–Ω—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>\n"
        )


        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        odds_by_type = {}
        for odd in found_odds:
            if odd['type'] not in odds_by_type:
                odds_by_type[odd['type']] = []
            odds_by_type[odd['type']].append(str(odd['value']))

        for odd in found_odds:
            message_text += f"‚Ä¢ {odd['detail']}: {odd['value']}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
        prediction_text = make_prediction(odds_by_type)
        message_text += f"\nüìä <b>–ü—Ä–æ–≥–Ω–æ–∑:</b>\n{prediction_text}\n"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π bet_id —á–µ—Ä–µ–∑ md5
        bet_id = hashlib.md5(f"{match_info['teams']}_{match_info['time']}".encode()).hexdigest()[:10]
        print(f"üìå bet_id: {bet_id} | –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç? {'–î–∞' if bet_id in bet_messages else '–ù–µ—Ç'}")

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        group_keyboard = InlineKeyboardBuilder()
        group_keyboard.row(
            InlineKeyboardButton(text="üìå –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ", url=match_info['event_url'])
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        try:
            group_message = await bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=message_text,
                parse_mode="HTML",
                reply_markup=group_keyboard.as_markup()
            )
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ GROUP_CHAT")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GROUP_CHAT: {e}")
            return


    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ send_bet_to_chats: {e}")



async def monitor_matches():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π"""
    DELAY_BETWEEN_MSGS = 10  # —Å–µ–∫ –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏

    while True:
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä—è—é –º–∞—Ç—á–∏...")
            matches = await parse_shadow_dom(driver=setup_driver())

            if matches:
                for match in matches:
                    if match['has_target_odds']:
                        bet_id = str(hash(f"{match['teams']}_{match['time']}"))[:10]
                        if bet_id not in bet_messages:
                            await asyncio.sleep(DELAY_BETWEEN_MSGS)
                    else:
                        logger.info(f"–ù–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –∫–æ—ç—Ñ. –¥–ª—è: {match['teams']}, –∏—â—É –¥—Ä—É–≥–æ–π...")

            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö")

            await asyncio.sleep(30)  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n{traceback.format_exc()}")
            await asyncio.sleep(60)


@dp.callback_query(lambda c: c.data.startswith("set_result:"))
async def handle_admin_callback(callback: types.CallbackQuery):
    try:
        _, action, bet_id = callback.data.split(":", 2)

        if bet_id not in bet_messages:
            await callback.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        message_info = bet_messages[bet_id]
        status_text = {
            "win": "‚úÖ –°—Ç–∞–≤–∫–∞ –í–´–ò–ì–†–ê–õ–ê",
            "lose": "‚ùå –°—Ç–∞–≤–∫–∞ –ü–†–û–ò–ì–†–ê–õ–ê",
            "pending": "üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
        }.get(action, "üîÑ –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await bot.edit_message_text(
            chat_id=GROUP_CHAT_ID,
            message_id=message_info["group_message_id"],
            text=f"{status_text}\n\n{message_info['text']}",
            parse_mode="HTML"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–æ–≤
        await bot.edit_message_text(
            chat_id=ADMIN_CHAT_ID,
            message_id=message_info["admin_message_id"],
            text=f"üì¢ –ê–î–ú–ò–ù | {status_text}\n\n{message_info['text']}",
            parse_mode="HTML"
        )

        await callback.answer(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {action}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤</b>\n\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—Ç—á–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤.\n"
        "–ö–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª (FIFA) –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        parse_mode="HTML"
    )


@dp.message(Command("check"))
async def manual_check(message: types.Message):
    msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –º–∞—Ç—á–∏...")
    matches = await parse_shadow_dom(driver=setup_driver())

    if not matches:
        await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return

    target_matches = [m for m in matches if m['has_target_odds']]
    if not target_matches:
        await msg.edit_text("‚ÑπÔ∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    await msg.edit_text("üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Ç—á–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ —á–∞—Ç—ã...")
    for match in target_matches[:3]:
        bet_id = str(hash(f"{match['teams']}_{match['time']}"))[:10]
        if bet_id not in bet_messages:
            await send_bet_to_chats(match, match['found_odds'])


async def main():
    asyncio.create_task(monitor_matches())
    asyncio.create_task(scheduled_cleanup())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
