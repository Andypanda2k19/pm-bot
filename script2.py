import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import logging
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from aiogram.enums import ParseMode
import os
import random
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = "8125187062:AAFGe_HFNxM3oTMwWuQYIwvem2ILEkcUj3o"
ADMIN_CHAT_ID = "-4917303136"
GROUP_CHAT_ID = "-1002605832321"

# –ò—Å–∫–æ–º—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
TARGET_ODDS = {2.57, 1.83, 2.21}

# –¢–∏–ø—ã —Å—Ç–∞–≤–æ–∫
MARKET_TYPES = {
    "lv_market_results": "1-X-2",
    "lv_market-doubleChance": "–î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å",
    "lv_market-overUnder": "–¢–æ—Ç–∞–ª",
    "lv_market-handicap": "–§–æ—Ä–∞",
    "lv_market-bothTeamsToScore": "–û–±–µ –∑–∞–±—å—é—Ç",
    "lv_market-correctScore": "–¢–æ—á–Ω—ã–π —Å—á–µ—Ç"
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª–∞
CYBER_FOOTBALL_KEYWORDS = ["fifa", "–∫–∏–±–µ—Ä", "cyber", "esports", "e-sports", "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π", "virtual", "EA", "volta"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
bet_messages = {}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def is_cyber_football(teams_text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ç—á –∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª–æ–º"""
    if not teams_text:
        return False
    teams_lower = teams_text.lower()
    return any(keyword in teams_lower for keyword in CYBER_FOOTBALL_KEYWORDS)


async def get_market_name(element):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    try:
        market_element = element.find_element(By.XPATH, "./ancestor::div[contains(@class, 'lv_event_market')]")
        for class_name, market_name in MARKET_TYPES.items():
            if class_name in market_element.get_attribute("class"):
                return market_name
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"


async def check_odds(match_element):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ –º–∞—Ç—á–µ"""
    found_odds = []
    try:
        all_odds_elements = match_element.find_elements(By.CSS_SELECTOR, ".lv_stake_odd")
        for odd_element in all_odds_elements:
            try:
                odd_text = odd_element.text
                if not odd_text:
                    continue
                num = float(odd_text)
                if num in TARGET_ODDS:
                    market_type = await get_market_name(odd_element)
                    found_odds.append({
                        "value": num,
                        "type": market_type,
                        "element": odd_element
                    })
            except ValueError:
                continue
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
    return found_odds


async def parse_shadow_dom():
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Shadow DOM"""
    driver = None
    try:
        chrome_options = Options()
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument(f"--user-data-dir=/tmp/chrome_profile_{random.randint(1, 10000)}")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")

        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)

        logger.info("–û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É PM.BY...")
        driver.get("https://pm.by/ru/sport/live/football/flt-IntcIjFcIjp7fX0i-sub")

        wait = WebDriverWait(driver, 20)
        shadow_host = wait.until(EC.presence_of_element_located((By.TAG_NAME, "sport-latino-view")))
        shadow_root = driver.execute_script("return arguments[0].shadowRoot", shadow_host)

        if not shadow_root:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Shadow Root")
            return None

        matches = []
        match_blocks = shadow_root.find_elements(By.CSS_SELECTOR, ".lv_event_row")

        for match in match_blocks:
            try:
                teams = match.find_element(By.CSS_SELECTOR, ".lv_teams").text
                if await is_cyber_football(teams):
                    logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª: {teams}")
                    continue

                time_elem = match.find_element(By.CSS_SELECTOR, ".lv_event_time")
                time = time_elem.get_attribute("title") or time_elem.text

                try:
                    score = match.find_element(By.CSS_SELECTOR, ".dg_live_score").text
                except:
                    score = "–°—á–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

                found_odds = await check_odds(match)

                matches.append({
                    "teams": teams,
                    "time": time,
                    "score": score,
                    "found_odds": found_odds,
                    "has_target_odds": len(found_odds) > 0
                })
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞: {e}")
                continue

        return matches
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return None
    finally:
        if driver:
            driver.quit()


async def send_bet_to_chats(match_info, found_odds):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞–≤–∫—É –≤ –æ–±–∞ —á–∞—Ç–∞"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"----------------------------------\n"
            f"‚öΩ <b>{match_info['teams']}</b>\n"
            f"‚è∞ –í—Ä–µ–º—è: {match_info['time']}\n"
            f"üî¢ –°—á–µ—Ç: {match_info['score']}\n\n"
            f"üí∞ <b>–ù–∞–π–¥–µ–Ω—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        odds_by_type = {}
        for odd in found_odds:
            if odd['type'] not in odds_by_type:
                odds_by_type[odd['type']] = []
            odds_by_type[odd['type']].append(str(odd['value']))

        for market_type, odds in odds_by_type.items():
            message_text += f"‚Ä¢ {market_type}: {', '.join(odds)}\n"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        group_keyboard = InlineKeyboardBuilder()
        group_keyboard.row(
            InlineKeyboardButton(text="üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data="empty")

        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        admin_keyboard = InlineKeyboardBuilder()
        bet_id = str(hash(f"{match_info['teams']}_{match_info['time']}"))[:10]
        admin_keyboard.row(
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à",
                                 callback_data=f"set_result:win:{bet_id}"),
            InlineKeyboardButton(text="‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à",
                                 callback_data=f"set_result:lose:{bet_id}"),
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        group_message = await bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=message_text,
            parse_mode="HTML",
            reply_markup=group_keyboard.as_markup()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤
        admin_message = await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üì¢ –ê–î–ú–ò–ù | {message_text}",
            parse_mode="HTML",
            reply_markup=admin_keyboard.as_markup()
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
        bet_messages[bet_id] = {
            "teams": match_info['teams'],
            "group_message_id": group_message.message_id,
            "admin_message_id": admin_message.message_id,
            "text": message_text
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞–≤–∫–∏: {e}")


async def update_bet_status(teams, status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ"""
    try:
        if teams not in bet_messages:
            return False

        message_info = bet_messages[teams]
        status_text = {
            "win": "‚úÖ –°—Ç–∞–≤–∫–∞ –í–´–ò–ì–†–ê–õ–ê",
            "lose": "‚ùå –°—Ç–∞–≤–∫–∞ –ü–†–û–ò–ì–†–ê–õ–ê",
            "pending": "üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
        }.get(status, "üîÑ –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await bot.edit_message_text(
            chat_id=GROUP_CHAT_ID,
            message_id=message_info["group_message_id"],
            text=f"{status_text}\n\n{message_info['text']}",
            parse_mode="HTML"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–æ–≤
        await bot.edit_message_text(
            chat_id=ADMIN_CHAT_ID,
            message_id=message_info["admin_message_id"],
            text=f"üì¢ –ê–î–ú–ò–ù | {status_text}\n\n{message_info['text']}",
            parse_mode="HTML"
        )

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False


async def monitor_matches():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π"""
    while True:
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä—è—é –º–∞—Ç—á–∏...")
            matches = await parse_shadow_dom()

            if matches:
                target_matches = [m for m in matches if m['has_target_odds']]
                if target_matches:
                    for match in target_matches:
                        if match['teams'] not in bet_messages:
                            await send_bet_to_chats(match, match['found_odds'])
                else:
                    logger.info("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö")

            await asyncio.sleep(120)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(120)


@dp.callback_query(lambda c: c.data.startswith("set_result:"))
async def handle_admin_callback(callback: types.CallbackQuery):
    try:
        _, action, bet_id = callback.data.split(":", 2)

        if bet_id not in bet_messages:
            await callback.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        message_info = bet_messages[bet_id]
        status_text = {
            "win": "‚úÖ –°—Ç–∞–≤–∫–∞ –í–´–ò–ì–†–ê–õ–ê",
            "lose": "‚ùå –°—Ç–∞–≤–∫–∞ –ü–†–û–ò–ì–†–ê–õ–ê",
            "pending": "üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
        }.get(action, "üîÑ –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await bot.edit_message_text(
            chat_id=GROUP_CHAT_ID,
            message_id=message_info["group_message_id"],
            text=f"{status_text}\n\n{message_info['text']}",
            parse_mode="HTML"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–æ–≤
        await bot.edit_message_text(
            chat_id=ADMIN_CHAT_ID,
            message_id=message_info["admin_message_id"],
            text=f"üì¢ –ê–î–ú–ò–ù | {status_text}\n\n{message_info['text']}",
            parse_mode="HTML"
        )

        await callback.answer(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {action}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤</b>\n\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—Ç—á–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤.\n"
        "–ö–∏–±–µ—Ä—Ñ—É—Ç–±–æ–ª (FIFA) –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        parse_mode="HTML"
    )


@dp.message(Command("check"))
async def manual_check(message: types.Message):
    msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –º–∞—Ç—á–∏...")
    matches = await parse_shadow_dom()

    if not matches:
        await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return

    target_matches = [m for m in matches if m['has_target_odds']]
    if not target_matches:
        await msg.edit_text("‚ÑπÔ∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    await msg.edit_text("üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Ç—á–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ —á–∞—Ç—ã...")
    for match in target_matches[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –º–∞—Ç—á–∞–º–∏
        await send_bet_to_chats(match, match['found_odds'])
        await asyncio.sleep(1)


async def main():
    asyncio.create_task(monitor_matches())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())